#!/usr/bin/env python3
"""
补全缺少的_category_.json文件的脚本
"""

import json
from pathlib import Path

def create_missing_category_files():
    """为缺少_category_.json的目录创建这些文件"""
    
    # 基础路径
    base_path = Path("docs")
    
    # 需要添加_category_.json的目录配置
    missing_categories = {
        "llm-infra": {
            "label": "LLM基础设施",
            "position": 3,
            "description": "学习LLM的基础设施建设，包括训练、推理优化与部署。"
        },
        "llm-infra/inference-optimization": {
            "label": "推理优化详解",
            "position": 2,
            "description": "深入了解LLM推理优化的各种策略与技术。"
        }
    }
    
    print("开始补全缺少的_category_.json文件...")
    print("=" * 50)
    
    for dir_path, config in missing_categories.items():
        full_path = base_path / dir_path
        category_file = full_path / "_category_.json"
        
        # 检查目录是否存在
        if not full_path.exists():
            print(f"⚠️  目录不存在: {full_path}")
            continue
            
        # 检查_category_.json是否已存在
        if category_file.exists():
            print(f"✅ 已存在: {category_file}")
            continue
        
        # 创建_category_.json文件
        category_config = {
            "label": config["label"],
            "position": config["position"],
            "link": {
                "type": "generated-index",
                "description": config["description"]
            }
        }
        
        with open(category_file, 'w', encoding='utf-8') as f:
            json.dump(category_config, f, ensure_ascii=False, indent=2)
        
        print(f"✨ 创建文件: {category_file}")
    
    print("=" * 50)
    print("✅ _category_.json文件补全完成！")

def update_sidebars_to_autogenerate():
    """将sidebars.js更新为自动生成模式"""
    
    sidebars_file = Path("sidebars.js")
    
    # 新的自动生成的sidebars.js内容
    new_content = """// @ts-check

// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.

 @type {import('@docusaurus/plugin-content-docs').SidebarsConfig}
 */
const sidebars = {
  // 使用自动生成的侧边栏，基于_category_.json文件
  tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],
};

export default sidebars;
"""
    
    # 备份原文件
    backup_file = Path("sidebars.js.backup")
    if sidebars_file.exists():
        import shutil
        shutil.copy2(sidebars_file, backup_file)
        print(f"📁 备份原文件到: {backup_file}")
    
    # 写入新内容
    with open(sidebars_file, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"✨ 更新文件: {sidebars_file}")
    print("🔄 现在使用自动生成的侧边栏模式")

def main():
    """主函数"""
    print("🚀 开始补全LLM知识体系的_category_.json文件...")
    print()
    
    try:
        # 1. 补全缺少的_category_.json文件
        create_missing_category_files()
        print()
        
        # 2. 询问是否要更新sidebars.js为自动生成模式
        response = input("是否要将sidebars.js更新为自动生成模式？(y/n): ").strip().lower()
        if response in ['y', 'yes', '是']:
            print()
            update_sidebars_to_autogenerate()
            print()
            print("🎉 完成！现在所有目录都有_category_.json文件，")
            print("   并且sidebars.js已更新为自动生成模式。")
            print()
            print("📋 自动生成的侧边栏将按照以下顺序显示:")
            print("   1. intro.md")
            print("   2. llm-basics/ (LLM基础)")
            print("   3. llm-advanced/ (LLM进阶)")
            print("   4. llm-infra/ (LLM基础设施)")
            print("   5. llm-security/ (LLM安全与风险)")
            print("   6. llm-evaluation/ (LLM评估与测试)")
            print("   7. llm-rag/ (检索增强生成)")
            print("   8. llm-agents/ (智能代理与工具使用)")
            print("   9. multimodal-ai/ (多模态AI)")
            print("   10. llm-development/ (LLM开发实践)")
            print("   11. llm-applications/ (领域特定应用)")
            print("   12. llm-research/ (前沿研究)")
        else:
            print()
            print("✅ 仅补全了_category_.json文件")
            print("💡 如需自动生成侧边栏，请手动运行此脚本并选择'y'")
            
    except Exception as e:
        print(f"❌ 处理过程中出现错误: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 